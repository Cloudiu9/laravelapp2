version: '3'  # Docker Compose file version

services:  # Defines the services to be created
    laravel.test:  # Laravel application service
        build:  # Builds the Docker image for the service
            context: ./vendor/laravel/sail/runtimes/8.2  # Build context directory
            dockerfile: Dockerfile  # Dockerfile used for building the image
            args:  # Build arguments
                WWWGROUP: '${WWWGROUP}'  # Value to replace the WWWGROUP argument during build
        image: sail-8.2/app  # Name of the Docker image for the service
        extra_hosts:  # Additional hosts entry in the container's /etc/hosts file
            - 'host.docker.internal:host-gateway'  # Maps host.docker.internal to host-gateway
        ports:  # Ports to expose and map from the host to the container
            - '${APP_PORT:-80}:80'  # Maps APP_PORT to 80, defaulting to 80 if not set
            - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'  # Maps VITE_PORT to itself, defaulting to 5173 if not set
        environment:  # Environment variables for the container
            WWWUSER: '${WWWUSER}'  # Value of WWWUSER environment variable
            LARAVEL_SAIL: 1  # Sets LARAVEL_SAIL environment variable to 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'  # Value of XDEBUG_MODE environment variable, defaulting to 'off'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'  # Value of XDEBUG_CONFIG environment variable, defaulting to 'client_host=host.docker.internal'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'  # Value of IGNITION_LOCAL_SITES_PATH environment variable, set to current working directory
        volumes:  # Mounts volumes to the container
            - '.:/var/www/html'  # Mounts current directory to /var/www/html in the container
        networks:  # Networks to which the container will be connected
            - sail  # Connects to the 'sail' network
        depends_on:  # Defines dependencies for the service
            - mysql  # Specifies that it depends on the 'mysql' service

    mysql:  # MySQL database service
        image: 'mysql/mysql-server:8.0'  # Docker image for the service
        ports:  # Ports to expose and map from the host to the container
            - '${FORWARD_DB_PORT:-3306}:3306'  # Maps FORWARD_DB_PORT to 3306, defaulting to 3306 if not set
        environment:  # Environment variables for the container
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'  # Value of MYSQL_ROOT_PASSWORD environment variable
            MYSQL_ROOT_HOST: '%'  # Allows connection to MySQL from any host
            MYSQL_DATABASE: '${DB_DATABASE}'  # Value of MYSQL_DATABASE environment variable
            MYSQL_USER: '${DB_USERNAME}'  # Value of MYSQL_USER environment variable
            MYSQL_PASSWORD: '${DB_PASSWORD}'  # Value of MYSQL_PASSWORD environment variable
            MYSQL_ALLOW_EMPTY_PASSWORD: 1  # Allows empty MySQL password
        volumes:  # Mounts volumes to the container
            - 'sail-mysql:/var/lib/mysql'  # Mounts 'sail-mysql' volume to /var/lib/mysql in the container
            - './vendor/laravel/sail/database/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'  # Mounts script to initialize the database
        networks:  # Networks to which the container will be connected
            - sail  # Connects to the 'sail' network
        healthcheck:  # Defines a health check for the container
            test:  # Health check command
                - CMD
                - mysqladmin
                - ping
                - '-p${DB_PASSWORD}'  # Password for the MySQL connection
            retries: 3  # Number of retries for the health check
            timeout: 5s  # Timeout for each health check attempt

    mailpit:
        image: 'axllent/mailpit:latest'
        container_name: mailpit
        restart: unless-stopped
        ports:
        - '${FORWARD_MAILPIT_PORT:-1025}:1025'
        - '${FORWARD_MAILPIT_UI_PORT:-8025}:8025' 
        networks:
        - sail

networks:  # Defines the networks used by the services
    sail:  # Custom bridge network called 'sail'

volumes:  # Defines the volumes used by the services
    sail-mysql:  # Local volume called 'sail-mysql'
        driver: local